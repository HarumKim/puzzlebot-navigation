#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import Jetson.GPIO as GPIO
import time

class BuzzerNode(Node):
    def __init__(self):
        super().__init__('buzzer_node')
        self.buzzer_pin = 12
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.buzzer_pin, GPIO.OUT)
        self.pwm = GPIO.PWM(self.buzzer_pin, 440)
        self.pwm.start(0)
        self.subscription = self.create_subscription(String, '/play_tone', self.play_tone_callback, 10)
        
        # Melod√≠as actualizadas con las del script
        self.melodies = {
            "turnRight": [(523, 0.15), (587, 0.15), (659, 0.2)],  # C5 ‚Üí D5 ‚Üí E5
            "turnLeft": [(659, 0.15), (587, 0.15), (523, 0.2)],   # E5 ‚Üí D5 ‚Üí C5
            "roadwork": [(262, 0.08), (196, 0.12), (165, 0.15)],  # Stomp Goomba Sound: C4 ‚Üí G3 ‚Üí E3
            "giveWay": [  # Level Down Super Mario Bros Wii
                (392, 0.3), (330, 0.3), (262, 0.4), (196, 0.5), 
                (0, 0.2), (175, 0.4), (147, 0.6), (131, 0.8)
                # G4 ‚Üí E4 ‚Üí C4 ‚Üí G3 ‚Üí PAUSA ‚Üí F3 ‚Üí D3 ‚Üí C3
            ],
            "stop": [  # Level Complete Super Mario Bros
                (392, 0.15), (523, 0.15), (659, 0.15), (784, 0.15), 
                (1047, 0.15), (1319, 0.15), (1568, 0.4), (0, 0.1),
                (1319, 0.2), (0, 0.05), (659, 0.2), (0, 0.05), (523, 0.6)
                # G4 ‚Üí C5 ‚Üí E5 ‚Üí G5 ‚Üí C6 ‚Üí E6 ‚Üí G6 ‚Üí PAUSA ‚Üí E6 ‚Üí PAUSA ‚Üí E5 ‚Üí PAUSA ‚Üí C5
            ],
            "aheadOnly": [(440, 0.2), (0, 0.05), (440, 0.2)]  # A4 ‚Üí PAUSA ‚Üí A4
        }
        
        self.get_logger().info('üéµ BuzzerNode iniciado con melod√≠as de Super Mario')
    
    def play_tone_callback(self, msg):
        melody_name = msg.data
        melody = self.melodies.get(melody_name, [])
        
        if not melody:
            self.get_logger().warn(f"‚ùå Melod√≠a '{melody_name}' no encontrada")
            return
            
        self.get_logger().info(f"üéµ Reproduciendo: {melody_name}")
        
        for freq, duration in melody:
            if freq <= 0:
                # Pausa/silencio
                self.pwm.ChangeDutyCycle(0)
            else:
                self.pwm.ChangeDutyCycle(50)
                try:
                    self.pwm.ChangeFrequency(freq)
                except OSError as e:
                    self.get_logger().error(f"‚ùå PWM Error (freq={freq}): {e}")
                    continue
            
            time.sleep(duration)
            # Peque√±a pausa entre notas para mejor separaci√≥n
            self.pwm.ChangeDutyCycle(0)
            time.sleep(0.02)
        
        # Asegurar que el sonido se apague al final
        self.pwm.ChangeDutyCycle(0)
        self.get_logger().info(f"‚úÖ {melody_name} completada")
    
    def destroy_node(self):
        self.get_logger().info('üîá Deteniendo BuzzerNode...')
        self.pwm.stop()
        GPIO.cleanup()
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    node = BuzzerNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        print("\nüõë Interrupci√≥n detectada")
    finally:
        node.destroy_node()
        rclpy.shutdown()
        print("üéº BuzzerNode terminado")

if __name__ == '__main__':
    main()
